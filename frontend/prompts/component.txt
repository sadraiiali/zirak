you are svelte 5 and svelte kit developer, this is the page that user will request you to take out each component. you carefully craft the input and output of each components the component must not use tailwind! they must use raw css!
you can use @lucide/svelte like 
<script>
  import { Skull } from '@lucide/svelte';
</script>

---
this is the page this is only mock up for you to know things better

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mastodon AI Bot - Interaction View</title>
    <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        :root {
            --background: 0 0% 100%; /* white */
            --foreground: 222.2 84% 4.9%; /* slate-950 */
            --muted: 210 40% 96.1%; /* slate-100 */
            --muted-foreground: 215.4 16.3% 46.9%; /* slate-500 */
            --card: 0 0% 100%; /* white */
            --card-foreground: 222.2 84% 4.9%; /* slate-950 */
            --border: 214.3 31.8% 91.4%; /* slate-200 */
            --input: 214.3 31.8% 91.4%; /* slate-200 */
            --primary: 221.2 83.2% 53.3%; /* indigo-600 */
            --primary-foreground: 210 40% 98%; /* slate-50 */
            --secondary: 210 40% 96.1%; /* slate-100 */
            --secondary-foreground: 222.2 47.4% 11.2%; /* slate-900 */
            --accent: 210 40% 96.1%; /* slate-100 */
            --accent-foreground: 222.2 47.4% 11.2%; /* slate-900 */
            --destructive: 0 84.2% 60.2%; /* red-600 */
            --destructive-foreground: 210 40% 98%; /* slate-50 */
            --ring: 221.2 83.2% 53.3%; /* indigo-500 */
            --radius: 0.5rem;
        }
        /* Use CSS variables */
        body { background-color: hsl(var(--muted)); color: hsl(var(--foreground)); font-family: Inter, sans-serif; }
        .bg-background { background-color: hsl(var(--background)); }
        .bg-card { background-color: hsl(var(--card)); }
        .bg-muted { background-color: hsl(var(--muted)); }
        .bg-primary { background-color: hsl(var(--primary)); }
        .bg-secondary { background-color: hsl(var(--secondary)); }
        .bg-accent { background-color: hsl(var(--accent)); }
        .text-foreground { color: hsl(var(--foreground)); }
        .text-muted-foreground { color: hsl(var(--muted-foreground)); }
        .text-primary { color: hsl(var(--primary)); }
        .text-primary-foreground { color: hsl(var(--primary-foreground)); }
        .text-secondary-foreground { color: hsl(var(--secondary-foreground)); }
        .text-accent-foreground { color: hsl(var(--accent-foreground)); }
        .border-border { border-color: hsl(var(--border)); }
        .ring-ring { --tw-ring-color: hsl(var(--ring)); }
        .rounded-lg { border-radius: var(--radius); }
        .rounded-md { border-radius: calc(var(--radius) - 2px); }
        .rounded-sm { border-radius: calc(var(--radius) - 4px); }

        @import url('https://rsms.me/inter/inter.css');

        [x-cloak] { display: none !important; }
        ::-webkit-scrollbar { width: 6px; height: 6px; }
        ::-webkit-scrollbar-thumb { background: hsl(var(--border)); border-radius: 3px; }
        ::-webkit-scrollbar-thumb:hover { background: hsl(var(--muted-foreground)); }
        ::-webkit-scrollbar-track { background: hsl(var(--muted)); border-radius: 3px; }

        .btn { @apply inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50; }
        .btn-primary { @apply bg-primary text-primary-foreground hover:bg-primary/90; }
        .btn-secondary { @apply bg-secondary text-secondary-foreground hover:bg-secondary/80; }
        .btn-ghost { @apply hover:bg-accent hover:text-accent-foreground; }
        .btn-outline { @apply border border-border bg-background hover:bg-accent hover:text-accent-foreground; }
        .btn-md { @apply h-10 px-4 py-2; }
        .btn-sm { @apply h-9 rounded-md px-3; }
        .btn-xs { @apply h-8 rounded-md px-2.5 text-xs; }
        .btn-icon { @apply h-10 w-10; }
        .btn-icon-sm { @apply h-9 w-9; }
        .btn-icon-xs { @apply h-8 w-8; }

        .card { @apply rounded-lg border border-border bg-card text-card-foreground shadow-sm; }

        .antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }

        /* Basic Tooltip */
        [data-tooltip] { position: relative; }
        [data-tooltip]:hover::after { content: attr(data-tooltip); position: absolute; left: 100%; top: 50%; transform: translateY(-50%); margin-left: 12px; padding: 4px 8px; background-color: hsl(var(--foreground)); color: hsl(var(--background)); border-radius: 4px; font-size: 0.75rem; line-height: 1rem; white-space: nowrap; z-index: 50; pointer-events: none; opacity: 0; transition: opacity 0.15s 0.3s ease-in-out; }
        [data-tooltip]:hover::after { opacity: 1; }

        /* Style for prompt/message text within blobs */
        .message-blob-text {
             @apply block w-full whitespace-pre-wrap break-words text-sm font-mono text-foreground;
        }

         /* Simple transition for max-height */
        .max-h-0 { max-height: 0; }
        .max-h-fit { max-height: 1000px; } /* Adjust large enough value */
        .transition-max-height { transition: max-height 0.3s ease-in-out; }
    </style>
</head>
<body class="antialiased">
    <div class="flex h-screen overflow-hidden bg-muted">

        <!-- Icon-Only Sidebar -->
        <aside class="hidden md:flex md:flex-shrink-0">
             <div class="flex w-16 flex-col items-center border-r border-border bg-background py-4">
                 <div class="flex flex-shrink-0 items-center justify-center h-10 w-10 mb-6" data-tooltip="Mastodon AI">
                    <i data-lucide="bot" class="h-7 w-7 text-primary"></i>
                </div>
                <nav class="flex flex-col items-center flex-1 space-y-2 mt-2">
                    <a href="#" class="relative bg-accent text-accent-foreground flex items-center justify-center rounded-md h-10 w-10 text-sm font-medium" aria-current="page" data-tooltip="AI Interaction">
                        <i data-lucide="message-square-code" class="h-5 w-5 text-primary"></i>
                    </a>
                    <a href="#" class="relative text-muted-foreground hover:bg-accent hover:text-accent-foreground flex items-center justify-center rounded-md h-10 w-10 text-sm font-medium" data-tooltip="History">
                        <i data-lucide="history" class="h-5 w-5"></i>
                    </a>
                    <a href="#" class="relative text-muted-foreground hover:bg-accent hover:text-accent-foreground flex items-center justify-center rounded-md h-10 w-10 text-sm font-medium" data-tooltip="Configuration">
                        <i data-lucide="sliders-horizontal" class="h-5 w-5"></i>
                    </a>
                    <a href="#" class="relative text-muted-foreground hover:bg-accent hover:text-accent-foreground flex items-center justify-center rounded-md h-10 w-10 text-sm font-medium" data-tooltip="Settings">
                        <i data-lucide="settings" class="h-5 w-5"></i>
                    </a>
                </nav>
                <div class="mt-auto flex flex-shrink-0 items-center justify-center pt-4">
                    <a href="#" class="relative group block" data-tooltip="UserX - View Profile">
                         <img class="inline-block h-9 w-9 rounded-full ring-2 ring-offset-2 ring-offset-background ring-transparent group-hover:ring-primary/50 transition-all"
                              src="https://media.khiar.net/cache/accounts/avatars/114/280/126/567/340/828/original/f20936bb6bd8d8de.png"
                              alt="User Avatar">
                    </a>
                </div>
            </div>
        </aside>

        <!-- Main Content Area -->
        <div class="flex flex-1 flex-col overflow-hidden" x-data="aiInteractionPanel()" x-init="startProcessingSequence()">
             <!-- Header/Toolbar -->
             <header class="flex h-14 items-center gap-4 border-b border-border bg-background px-6 sticky top-0 z-30">
                <h1 class="text-lg font-semibold text-foreground flex-1 whitespace-nowrap overflow-hidden text-ellipsis">AI Interaction Sequence</h1>
                <div class="flex items-center gap-2 flex-shrink-0">
                     <button @click="startProcessingSequence()" class="btn btn-outline btn-sm" :disabled="processing">
                         <i data-lucide="play" class="w-4 h-4 mr-1.5" x-show="!processing"></i>
                         <i data-lucide="loader-2" class="w-4 h-4 mr-1.5 animate-spin" x-show="processing"></i>
                         Run Again
                    </button>
                     <button class="btn btn-primary btn-sm">
                         <i data-lucide="plus" class="w-4 h-4 mr-1.5"></i> New
                    </button>
                </div>
            </header>

            <!-- Scrollable Content -->
            <main class="flex-1 overflow-y-auto p-6 lg:p-8">
                 <div class="card max-w-6xl mx-auto overflow-hidden" x-cloak>
                    <div class="md:flex">
                        <!-- Left Panel: Prompt Details -->
                         <div class="md:w-2/5 p-6 border-r border-border bg-muted/50">
                            <h2 class="text-base font-semibold text-foreground mb-4 flex items-center">
                                <i data-lucide="file-text" class="w-4 h-4 mr-2 text-muted-foreground"></i>
                                Initiating Prompt Details
                            </h2>
                            <div class="space-y-4">
                                <div class="flex items-start space-x-3">
                                    <img class="inline-block h-9 w-9 rounded-full flex-shrink-0" src="https://media.khiar.net/cache/accounts/avatars/114/280/126/567/340/828/original/f20936bb6bd8d8de.png" alt="UserX Avatar">
                                    <div class="flex-1">
                                        <p class="text-sm font-medium text-foreground">UserX</p>
                                        <p class="text-xs text-muted-foreground">Posted <time datetime="2023-10-27T10:00:00Z" x-text="relativeTime(requestTimestamp)"></time></p>
                                    </div>
                                </div>
                                <blockquote class="border-l-4 border-border pl-4 text-foreground text-sm py-2 bg-background rounded-r-md shadow-sm">
                                    <p x-text="promptMessage"></p>
                                </blockquote>
                                <div class="space-y-2 pt-2">
                                    <h3 class="text-xs font-semibold text-muted-foreground uppercase tracking-wider">Metadata</h3>
                                    <div class="text-xs text-muted-foreground space-y-1.5 border border-border rounded-md p-3 bg-background/50">
                                        <div class="flex items-center"> <i data-lucide="tag" class="w-3.5 h-3.5 mr-1.5 flex-shrink-0"></i> Tags: <span class="ml-1.5 flex flex-wrap gap-1"><span class="inline-flex items-center rounded-full bg-blue-100 px-2 py-0.5 text-xs font-medium text-blue-800">#AI</span> <span class="inline-flex items-center rounded-full bg-green-100 px-2 py-0.5 text-xs font-medium text-green-800">#Mastodon</span><span class="inline-flex items-center rounded-full bg-purple-100 px-2 py-0.5 text-xs font-medium text-purple-800">#OpenSource</span></span> </div>
                                         <div class="flex items-center"> <i data-lucide="zap" class="w-3.5 h-3.5 mr-1.5 flex-shrink-0"></i> Intent: <span class="ml-1.5 font-medium text-foreground">Generate Toot</span></div>
                                          <div class="flex items-center"> <i data-lucide="settings-2" class="w-3.5 h-3.5 mr-1.5 flex-shrink-0"></i> Model Preference: <span class="ml-1.5 font-medium text-foreground">Default Creative</span></div>
                                          <div class="flex items-center"> <i data-lucide="calendar-clock" class="w-3.5 h-3.5 mr-1.5 flex-shrink-0"></i> Requested: <span class="ml-1.5 font-medium text-foreground" x-text="requestTimestamp.toLocaleString([], { dateStyle: 'short', timeStyle: 'short' })"></span></div>
                                    </div>
                                </div>
                             </div>
                        </div>

                        <!-- Right Panel: AI Processing Steps & Strategy -->
                        <div class="md:w-3/5 p-6">
                             <div class="mb-5 border border-border bg-gradient-to-br from-muted/30 to-muted/60 rounded-lg p-4 shadow-sm">
                                 <h3 class="text-sm font-semibold text-foreground mb-2 flex items-center">
                                     <i data-lucide="list-tree" class="w-4 h-4 mr-2 text-primary"></i>
                                     Strategy Used: <span class="ml-1.5 font-semibold text-primary" x-text="strategyName"></span>
                                 </h3>
                                 <ol class="list-decimal list-inside text-xs text-muted-foreground space-y-1 pl-1">
                                     <template x-for="strategyStep in aiStepsDefinition" :key="strategyStep.id">
                                         <li x-text="strategyStep.title"></li>
                                     </template>
                                 </ol>
                             </div>

                             <h2 class="text-base font-semibold text-foreground mb-4 flex items-center">
                                <i data-lucide="list-checks" class="w-4 h-4 mr-2 text-teal-600"></i>
                                Agent Processing Sequence
                            </h2>

                            <div class="space-y-2">
                                <div x-show="!processing && processedSteps.length === 0 && !finalOutput" class="flex-grow flex flex-col items-center justify-center text-muted-foreground text-center p-6">
                                     <i data-lucide="loader-2" class="w-6 h-6 mb-3 text-muted-foreground animate-spin"></i>
                                    <span class="text-sm">Initializing sequence... Please wait.</span>
                                </div>

                                <!-- AI Steps Template -->
                                <template x-for="(step, index) in processedSteps" :key="step.id">
                                     <div class="border bg-background rounded-md shadow-sm overflow-hidden"
                                         :class="{
                                             'border-l-4 border-teal-500': step.status === 'complete',
                                             'border-l-4 border-blue-500 ring-1 ring-blue-100 shadow-md': step.status === 'processing',
                                             'border-l-4 border-border opacity-80 hover:opacity-100 transition-opacity': step.status === 'pending'
                                            }"
                                         x-show="currentStep >= index">

                                        <!-- Step Header -->
                                        <div class="flex items-center p-3">
                                             <div class="mr-3 flex-shrink-0 pt-0.5">
                                                <span x-show="step.status === 'complete'" class="text-teal-600"> <i data-lucide="check-circle" class="w-4 h-4"></i> </span>
                                                <span x-show="step.status === 'processing'" class="text-blue-600"> <i data-lucide="loader-2" class="w-4 h-4 animate-spin"></i> </span>
                                                <span x-show="step.status === 'pending'" class="text-muted-foreground"> <i :data-lucide="step.icon || 'circle-dashed'" class="w-4 h-4"></i> </span>
                                            </div>
                                            <div class="flex-grow">
                                                <p class="font-medium text-sm text-foreground" x-text="step.title"></p>
                                            </div>
                                            <div class="flex items-center ml-3 flex-shrink-0 space-x-3">
                                                 <button x-show="step.llmCall && (step.status === 'processing' || step.status === 'complete')"
                                                        @click.stop="openLlmModal(step.llmCall)"
                                                        class="flex flex-row items-center btn btn-xs btn-outline text-primary border-primary/50 hover:bg-primary/10"
                                                        title="View LLM Details">
                                                     <i data-lucide="inspect" class="w-3 h-3 mr-1"></i>
                                                     <span class="text-sm">
                                                        LLM Call
                                                     </span>
                                                 </button>
                                                 <span x-show="step.status === 'complete'" class="text-xs text-muted-foreground" x-text="`(${step.duration || 0}ms)`"></span>
                                                 <span x-show="step.status === 'processing'" class="text-xs text-blue-600">Running...</span>
                                                <button @click="toggleExpand(step.id)" class="btn btn-ghost btn-icon-xs text-muted-foreground" title="Toggle Details">
                                                     <i data-lucide="chevron-down" class="w-4 h-4 transition-transform" :class="{ 'rotate-180': step.isExpanded }"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Step Details (Collapsible Content) -->
                                         <div x-show="step.isExpanded"
                                             class="border-t border-border bg-muted/30 overflow-hidden"
                                             x-transition:enter="transition-max-height duration-300 ease-out"
                                             x-transition:enter-start="max-h-0 opacity-0"
                                             x-transition:enter-end="max-h-fit opacity-100"
                                             x-transition:leave="transition-max-height duration-200 ease-in"
                                             x-transition:leave-start="max-h-fit opacity-100"
                                             x-transition:leave-end="max-h-0 opacity-0">
                                              <div class="px-3 pb-3 ml-7 pt-2 space-y-2">
                                                 <p class="text-sm text-muted-foreground" x-text="step.description"></p>
                                                 <p x-show="step.details" class="text-xs text-muted-foreground mt-1 p-1.5 bg-background rounded border border-border" x-text="step.details"></p>
                                             </div>
                                        </div>
                                    </div>
                                </template>

                                <!-- Final Output Panel -->
                                <div x-show="finalOutput"
                                     class="mt-4 p-4 border border-green-300 rounded-lg bg-green-50/60 ring-1 ring-green-100 shadow-sm"
                                     x-transition:enter="transition ease-out duration-500"
                                     x-transition:enter-start="opacity-0 scale-95"
                                     x-transition:enter-end="opacity-100 scale-100">
                                    <div class="flex justify-between items-center mb-2">
                                        <h3 class="text-base font-semibold text-green-800 flex items-center">
                                            <i data-lucide="check-check" class="w-5 h-5 mr-2 text-green-700"></i>
                                            Response Generated
                                        </h3>
                                        <span class="text-xs text-green-700">Total time: <span x-text="totalDuration"></span>ms</span>
                                    </div>
                                    <div class="p-3 bg-background border border-border rounded-md shadow-inner">
                                         <p class="text-sm text-foreground whitespace-pre-wrap" x-text="finalOutput"></p>
                                    </div>
                                    <div class="mt-4 pt-3 border-t border-green-200 flex flex-row items-center justify-between">
                                        <div class="flex flex-row items-center space-x-2">
                                            <button class="btn btn-primary btn-sm flex flex-row px-2 rounded-md border items-center shadow-sm hover:shadow transition-all active:translate-y-0.5">
                                                <i data-lucide="send" class="w-3.5 h-3.5 mr-1.5"></i> Post
                                            </button>
                                            <button class="btn btn-outline btn-sm flex flex-row px-2 rounded-md border items-center shadow-sm hover:shadow-md transition-all active:translate-y-0.5">
                                                <i data-lucide="copy" class="w-3.5 h-3.5 mr-1.5"></i> Copy
                                            </button>
                                            <button class="btn btn-ghost btn-sm flex flex-row px-2 rounded-md border items-center text-muted-foreground hover:bg-accent transition-colors duration-200 hover:shadow-sm active:translate-y-0.5">
                                                <i data-lucide="edit-3" class="w-3.5 h-3.5 mr-1.5"></i> Edit
                                            </button>
                                        </div>
                                        <button @click="startProcessingSequence()" 
                                                class="btn btn-outline btn-sm flex flex-row px-2 rounded-md border items-center text-muted-foreground hover:text-destructive border-destructive/20 hover:border-destructive/40 hover:bg-destructive/10 shadow-sm hover:shadow transition-all active:translate-y-0.5" 
                                                :disabled="processing">
                                            <i data-lucide="refresh-ccw" class="w-3.5 h-3.5 mr-1.5 transition-transform hover:rotate-180 duration-500"></i> 
                                            <span x-show="!processing">Regenerate</span>
                                            <span x-show="processing" class="flex items-center">
                                                <i data-lucide="loader-2" class="w-3.5 h-3.5 mr-1.5 animate-spin"></i>
                                                Processing...
                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>

            <!-- Status Bar Footer -->
             <footer class="flex h-8 items-center text-xs border-t border-border bg-background px-4 text-muted-foreground flex-shrink-0 z-10">
                 <div class="flex items-center gap-1">
                     <i data-lucide="check-circle" class="w-3.5 h-3.5 text-green-600" x-show="!processing && finalOutput"></i>
                     <i data-lucide="loader-2" class="w-3.5 h-3.5 text-blue-600 animate-spin" x-show="processing"></i>
                     <i data-lucide="circle-slash-2" class="w-3.5 h-3.5 text-muted-foreground" x-show="!processing && !finalOutput"></i>
                     Status: <span class="font-medium text-foreground ml-0.5" x-text="processing ? 'Processing...' : (finalOutput ? 'Complete' : 'Idle')">Idle</span>
                 </div>
                <div class="mx-3 border-l h-4 border-border"></div>
                <div class="flex items-center gap-1">
                    <i data-lucide="server" class="w-3.5 h-3.5"></i> Model Used: <span class="font-medium text-foreground ml-0.5" x-text="finalModelUsed || 'N/A'">N/A</span>
                 </div>
                  <div class="mx-3 border-l h-4 border-border"></div>
                 <div class="flex items-center gap-1">
                     <i data-lucide="timer" class="w-3.5 h-3.5"></i> Duration: <span class="font-medium text-foreground ml-0.5" x-text="totalDuration ? `${totalDuration}ms` : '--'">--</span>
                 </div>
                <div class="flex-1 text-right" x-data="{ currentTime: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' }) }" x-init="setInterval(() => { currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' }) }, 1000)">
                    <span x-text="currentTime"></span>
                </div>
            </footer>

            <!-- LLM Call Details Modal -->
            <div x-show="isModalOpen"
                 class="fixed inset-0 z-50 flex items-start justify-center pt-16 sm:pt-24 p-4"
                 style="display: none;" x-cloak>
                 <!-- Overlay -->
                <div x-show="isModalOpen"
                     x-transition:enter="ease-out duration-300"
                     x-transition:enter-start="opacity-0"
                     x-transition:enter-end="opacity-100"
                     x-transition:leave="ease-in duration-200"
                     x-transition:leave-start="opacity-100"
                     x-transition:leave-end="opacity-0"
                     @click="isModalOpen = false; modalLlmData = null"
                     class="fixed inset-0 bg-black/60 backdrop-blur-sm"></div>

                <!-- Modal Content -->
                <div @click.stop
                     x-show="isModalOpen"
                     x-transition:enter="ease-out duration-300"
                     x-transition:enter-start="opacity-0 scale-95"
                     x-transition:enter-end="opacity-100 scale-100"
                     x-transition:leave="ease-in duration-200"
                     x-transition:leave-start="opacity-100 scale-100"
                     x-transition:leave-end="opacity-0 scale-95"
                     class="relative w-full max-w-3xl bg-card rounded-lg shadow-xl overflow-hidden border border-border">

                    <div class="flex items-center justify-between p-4 border-b border-border">
                        <h3 class="text-lg font-semibold text-foreground flex items-center">
                             <i data-lucide="inspect" class="w-5 h-5 mr-2 text-primary"></i> LLM Call Details
                        </h3>
                        <button @click="isModalOpen = false; modalLlmData = null" class="btn btn-ghost btn-icon-sm text-muted-foreground hover:bg-accent">
                            <i data-lucide="x" class="w-5 h-5"></i>
                        </button>
                    </div>

                    <div class="p-6 space-y-5 max-h-[70vh] overflow-y-auto">
                         <template x-if="modalLlmData">
                             <div class="space-y-5">
                                <div>
                                     <label class="block text-sm font-medium text-foreground mb-2">Model Used:</label>
                                     <span class="inline-flex items-center rounded-md bg-purple-100 px-2.5 py-1 text-sm font-semibold text-purple-800 shadow-sm ring-1 ring-inset ring-purple-200" x-text="modalLlmData.modelUsed"></span>
                                 </div>
                                 <div>
                                     <label class="block text-sm font-medium text-foreground mb-2">System Prompt:</label>
                                     <div class="bg-muted border border-border rounded-lg p-4 shadow-inner">
                                         <p class="message-blob-text" x-text="modalLlmData.systemPrompt"></p>
                                     </div>
                                 </div>
                                 <div>
                                     <label class="block text-sm font-medium text-foreground mb-2">User Message(s):</label>
                                     <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 shadow-inner">
                                          <p class="message-blob-text !text-blue-900" x-text="modalLlmData.userMessages"></p>
                                     </div>
                                 </div>
                             </div>
                         </template>
                         <template x-if="!modalLlmData">
                            <p class="text-muted-foreground">No LLM data available for this step.</p>
                         </template>
                    </div>
                     <div class="px-6 py-3 bg-muted border-t border-border text-right">
                        <button @click="isModalOpen = false; modalLlmData = null" class="btn btn-secondary btn-sm">Close</button>
                    </div>
                </div>
            </div> <!-- End Modal -->

        </div> <!-- End Main Content Area -->
    </div> <!-- End Main Flex Container -->

    <script>
        function aiInteractionPanel() {
            return {
                promptMessage: "Draft a short, engaging toot about the recent advancements in open-source AI models. Mention potential benefits for the Mastodon community.",
                requestTimestamp: new Date(),
                strategyName: "Standard Toot Generation",
                processing: false,
                aiStepsDefinition: [
                     { id: 1, icon: 'scan-text', title: 'Analyzing Prompt', description: 'Identifying keywords, entities, and overall intent.', duration: 650 },
                    { id: 2, icon: 'database-zap', title: 'Knowledge Retrieval', description: 'Querying vector DB for relevant context and news.', duration: 1150 },
                    {
                        id: 3, icon: 'brain-circuit', title: 'Content Generation (LLM Call)', description: 'Generating draft based on prompt and retrieved data.', duration: 1600,
                        llmCall: {
                            modelUsed: 'llama3-instruct-8b-alpha',
                            systemPrompt: 'You are a helpful AI assistant specializing in crafting concise and engaging social media posts for the Mastodon platform. Focus on tech topics, especially open source. Use relevant hashtags. Keep posts under 300 characters if possible.\n\nTone: Enthusiastic yet informative.',
                            userMessages: "Based on the initial prompt and retrieved context about recent open-source AI advancements (like improved model access and community projects), draft a suitable Mastodon toot. Highlight benefits such as transparency and potential for cool Fediverse tools."
                        }
                    },
                    { id: 4, icon: 'feather', title: 'Refining & Formatting', description: 'Adjusting tone, adding hashtags, ensuring constraints.', duration: 900 },
                    { id: 5, icon: 'shield-check', title: 'Safety & Quality Check', description: 'Running checks for harmful content and coherence.', duration: 550 },
                    { id: 6, icon: 'package-check', title: 'Final Output Assembly', description: 'Preparing the final structured response.', duration: 350 }
                ],
                processedSteps: [],
                currentStep: -1,
                finalOutput: '',
                finalModelUsed: '',
                totalDuration: 0,
                isModalOpen: false,
                modalLlmData: null,
                timeoutId: null,

                relativeTime(date) { /* ... (same as before) ... */
                    const now = new Date();
                    const diffSeconds = Math.round((now - date) / 1000);
                    const diffMinutes = Math.round(diffSeconds / 60);
                    if (diffSeconds < 5) return "Just now";
                    if (diffMinutes < 1) return `${diffSeconds} seconds ago`;
                    if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
                    return date.toLocaleString([], { dateStyle: 'short', timeStyle: 'short' });
                },
                startProcessingSequence() { /* ... (same as before) ... */
                    clearTimeout(this.timeoutId);
                    this.processing = false;
                    this.finalOutput = '';
                    this.processedSteps = [];
                    this.currentStep = -1;
                    this.totalDuration = 0;
                    this.finalModelUsed = '';
                    this.requestTimestamp = new Date();
                    this.$nextTick(() => { this.initiateSequence(); });
                 },
                initiateSequence() { /* ... (same as before) ... */
                    if (this.processing) return;
                    this.processing = true;
                    this.processedSteps = JSON.parse(JSON.stringify(this.aiStepsDefinition)).map(step => ({ ...step, status: 'pending', details: '', isExpanded: false }));
                    this.currentStep = -1;
                    this.totalDuration = 0;
                    this.$nextTick(() => { lucide.createIcons(); this.processNextStep(); });
                },
                processNextStep() { /* ... (logic mostly same, ensure isExpanded handled) ... */
                     clearTimeout(this.timeoutId);
                     if (this.currentStep >= 0 && this.currentStep < this.processedSteps.length) {
                        const completedStep = this.processedSteps[this.currentStep];
                        if(completedStep.status !== 'complete') {
                            completedStep.status = 'complete';
                            // completedStep.isExpanded = false; // Decide if completed steps should collapse
                            this.totalDuration += completedStep.duration || 0;
                            if (!completedStep.llmCall) { /* ... populate details ... */
                                if (completedStep.id === 1) { completedStep.details = `Intent: Generate Toot`; }
                                if (completedStep.id === 2) { completedStep.details = 'Retrieved 3 relevant docs.'; }
                                if (completedStep.id === 4) { completedStep.details = 'Formatted for Mastodon.'; }
                                if (completedStep.id === 5) { completedStep.details = 'Safety checks passed.'; }
                            }
                            if(completedStep.llmCall) { this.finalModelUsed = completedStep.llmCall.modelUsed; }
                        }
                    }
                    this.currentStep++;
                    if (this.currentStep < this.processedSteps.length) {
                        const step = this.processedSteps[this.currentStep];
                        step.status = 'processing';
                        step.isExpanded = true; // Expand current step
                        this.$nextTick(() => { lucide.createIcons(); });
                        this.timeoutId = setTimeout(() => { /* ... */ this.processNextStep(); }, step.duration || 1000);
                    } else {
                        this.generateFinalOutput();
                        this.processing = false;
                        if(!this.finalModelUsed && this.processedSteps.find(s => s.llmCall)) { this.finalModelUsed = this.processedSteps.find(s => s.llmCall)?.llmCall.modelUsed || 'N/A'; }
                        this.$nextTick(() => { lucide.createIcons(); });
                    }
                 },
                generateFinalOutput() { /* ... (same as before) ... */
                    this.finalOutput = `Exciting times for open-source AI! 🚀 Recent models offer more transparency & community control. Great potential for cool tools and bots right here on the Fediverse! What benefits do you see?\n\n#OpenSourceAI #AI #Fediverse #Mastodon`;
                 },
                toggleExpand(stepId) { /* ... (same as before) ... */
                    const step = this.processedSteps.find(s => s.id === stepId);
                    if (step) { step.isExpanded = !step.isExpanded; }
                    this.$nextTick(() => { lucide.createIcons(); });
                },
                openLlmModal(llmData) { /* ... (same as before) ... */
                    this.modalLlmData = llmData;
                    this.isModalOpen = true;
                    this.$nextTick(() => { lucide.createIcons(); });
                },
                init() { /* ... (same as before) ... */
                     this.$nextTick(() => { lucide.createIcons(); });
                     this.relativeTime(this.requestTimestamp);
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();
        });
    </script>
</body>
</html>

```